{"componentChunkName":"component---src-templates-post-template-tsx","path":"/cs/web/브라우저/","result":{"pageContext":{"node":{"fields":{"slug":"/cs/web/브라우저/"},"excerpt":"브라우저 목적 브라우저의 주요 기능은 사용자가 명시한 자원을 서버에 요청하고 이를 브라우저에 표시하는 것이다.\n대부분 HTML 문서이며, 브라우저는 HTML 파일을 해석하여 화면에 보여주는 역할을 한다.\n헤석 과정에서 요즘 브라우저는 W3C에서 정하는 표준 명세를 대부분 따라서 호환성이 과거에 비해 크게 향상되었다. 브라우저의 구성 브라우저는 7개의 부분으로 구성되어 있다. 사용자 인터페이스 - 주소 표시줄, 이전/다음/새로고침 버튼 등 웹페…","frontmatter":{"date":"2022-10-15T00:00:00.000Z","description":"작성중.","title":"브라우저에 대해서"},"html":"<h1>브라우저 목적</h1>\n<p>브라우저의 주요 기능은 사용자가 명시한 자원을 서버에 요청하고 이를 브라우저에 표시하는 것이다.\n대부분 HTML 문서이며, 브라우저는 HTML 파일을 해석하여 화면에 보여주는 역할을 한다.\n헤석 과정에서 요즘 브라우저는 W3C에서 정하는 표준 명세를 대부분 따라서 호환성이 과거에 비해 크게 향상되었다.</p>\n<h1>브라우저의 구성</h1>\n<p>브라우저는 7개의 부분으로 구성되어 있다.</p>\n<ol>\n<li><strong>사용자 인터페이스</strong> - 주소 표시줄, 이전/다음/새로고침 버튼 등 웹페이지를 제외하고 사용자와 상호 작용하는 인터페이스이다.</li>\n<li><strong>브라우저 엔진</strong> - 사용자 인터페이스와 렌더링 엔진 사이의 동작을 제어한다.</li>\n<li><strong>렌더링 엔진</strong> - 요청한 콘텐츠를 표시한다. HTML을 요청하면 HTML과 CSS를 파싱하여 화면에 보여준다.</li>\n<li><strong>통신(Networking)</strong> - HTTP 요청과 같은 네트워크 호출에 사용된다. 플랫폼의 독립적인 인터페이스로 구성되어 있다.</li>\n<li><strong>자바스크립트 해석기</strong> - JS 코드를 해석하고 실행한다.</li>\n<li><strong>UI 백엔드</strong> - 콤보 박스와 같은 기본적인 장치를 그림. 플랫폼에서 명시하지 않았기에 OS 사용자 인터페이스 체계를 따른다.</li>\n<li><strong>자료 저장소</strong> - 쿠키, 로컬 스토리지 등 브라우저에 데이터를 저장할 수 있는 공간.</li>\n</ol>\n<h1>브라우저의 렌더링 과정</h1>\n<h1>브라우저의 이벤트 루프</h1>\n<p><a href=\"https://www.youtube.com/watch?v=YpQTeIqjC4o\">우테코 브라우저의 이벤트 루프</a></p>\n<h1>참고 자료</h1>\n<p><a href=\"https://d2.naver.com/helloworld/59361\">네이버 D2 자료</a></p>\n<p><a href=\"https://d2.naver.com/helloworld/5237120\">네이버 D2 자료2</a></p>","id":"cce72fd4-a726-5f4c-9012-179561fd66a4"},"previous":{"fields":{"slug":"/알고리즘/스타수열/"},"excerpt":"문제 링크 해결 전략 처음에 이 문제를 완전탐색 형태로 해결하고자 하였다. a의 부분 수열을 모두 만들고, 스타 수열인지 확인하는 방식으로 알고리즘을 짰다. 하지만 이 방식은, a의 길이가 최대 500,000이므로 절대 만족할 수 없다. 조합의 경우 O(2^n)의 시간 복잡도를 가지기 때문이다. 그렇다면 반대로 생각해봐야 한다. 모든 부분 수열을 만들어보고 스타 수열인지 검증하는 대신, 주어진 배열을 활용해서 직접 스타 수열을 만들어보면 된다…","frontmatter":{"date":"2022-10-13T00:00:00.000Z","description":"백트래킹","title":"스타수열"},"html":"<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/70130\">문제 링크</a></p>\n<h1>해결 전략</h1>\n<p>처음에 이 문제를 완전탐색 형태로 해결하고자 하였다. a의 부분 수열을 모두 만들고, 스타 수열인지 확인하는 방식으로 알고리즘을 짰다. 하지만 이 방식은, a의 길이가 최대 500,000이므로 절대 만족할 수 없다. 조합의 경우 O(2^n)의 시간 복잡도를 가지기 때문이다.</p>\n<p>그렇다면 <strong>반대로 생각해봐야 한다.</strong> 모든 부분 수열을 만들어보고 스타 수열인지 검증하는 대신, 주어진 배열을 활용해서 직접 스타 수열을 만들어보면 된다!</p>\n<p>스타수열을 만들 때, 우리는 중복된 숫자가 꼭 필요하다. 따라서 중복된 숫자가 많을수록 더 길이가 긴 스타수열을 만들 수 있다. 하지만 중복된 숫자가 많다고 해서 꼭 스타수열의 길이가 긴 것은 아니기에, 중복된 숫자의 개수가 큰 순서대로 검증해나가는 백트래킹 방식을 사용하면 된다.</p>\n<p><code>[1,1,1,1,1,1,1,1,1,1,2,3,2,3,2]</code>과 같은 배열의 경우 1이 가장 많은 중복된 숫자지만, 1을 교집합으로 두었을 때 스타 수열을 만들 수 없다. 1이 연속적으로 배치되어 있어 i번쨰와 i+1번째가 같기 때문이다. 따라서 그 다음으로 중복된 개수가 많은 2를 검증해야 한다.</p>\n<p>스타 수열 조건을 만족하는 부분 수열들을 찾아나가면서 합하는 방식으로 스타 수열의 최대 길이를 구할 것이다. 최대한 길이가 긴 스타 수열을 구하기 위해서는 좌측부터 만족시키면서 나가면 된다. 그래야 우측에 남은 배열의 길이가 길어져 더 길이가 긴 부분 수열을 만들 수 있다.</p>\n<h1>전체 코드</h1>\n<pre><code class=\"language-js\">function solution(a) {\n  //배열 내에서, 중복된 숫자의 순서가 많은 순서대로 정렬한다.\n  const obj = {}\n  a.forEach(v => {\n    if (!obj[v]) obj[v] = 1\n    else obj[v] += 1\n  })\n\n  const sameNumberCounts = Object.entries(obj).sort((a, b) => b[1] - a[1])\n\n  //스타 수열을 만족하는 최대 부분 수열을 찾는다.\n  let answer = 0\n\n  for (let [number, cnt] of sameNumberCounts) {\n    number = Number(number)\n    if (answer > cnt) break\n\n    let len = 0\n    for (let i = 0; i &#x3C; a.length; i++) {\n      if (a[i + 1] === undefined) continue\n\n      if (a[i] === number &#x26;&#x26; a[i + 1] !== number) {\n        len += 2\n        i++\n        continue\n      }\n      //좌측부터 만족하는지 확인, 좌측부터 만족하는지 확인해야 남는 우측 길이가 김.\n\n      if (a[i] !== number &#x26;&#x26; a[i + 1] === number) {\n        len += 2\n        i++\n        continue\n      }\n      //좌측이 만족하지 않는다면 우측으로 확인\n    }\n    answer = Math.max(answer, len)\n  }\n  return answer\n}\n</code></pre>","id":"46cdd6bd-2022-521c-8533-167ea9cf86fb"},"next":{"fields":{"slug":"/tech/React/GlobalState/"},"excerpt":"React에서 전역 상태 관리는 왜 필요할까? 리액트는 단방향 데이터 바인딩이라는 특징을 가진다. 단방향 데이터 바인딩 특징은 어플리케이션이 예측 가능하다는 장점이 있지만, 뷰를 업데이트 해주는 부분을 매번 작성해주어야 한다는 단점이 있다. 리액트의 경우 뷰가 state에 따라서 자동으로 갱신되어 뷰를 업데이트 해주는 코드를 작성할 필요는 없지만, 이 state를 어플리케이션 구조에 맞게 잘 전달해주는 과정이 필요하다. 만일 컴포넌트 구조가 …","frontmatter":{"date":"2022-10-17T00:00:00.000Z","description":"전역 상태 관리는 왜 필요하고, 어떤 도구들이 있나","title":"React의 전역 상태 관리"},"html":"<h1>React에서 전역 상태 관리는 왜 필요할까?</h1>\n<p>리액트는 단방향 데이터 바인딩이라는 특징을 가진다. 단방향 데이터 바인딩 특징은 어플리케이션이 예측 가능하다는 장점이 있지만, 뷰를 업데이트 해주는 부분을 매번 작성해주어야 한다는 단점이 있다. 리액트의 경우 뷰가 state에 따라서 자동으로 갱신되어 뷰를 업데이트 해주는 코드를 작성할 필요는 없지만, 이 state를 어플리케이션 구조에 맞게 잘 전달해주는 과정이 필요하다. 만일 컴포넌트 구조가 매우 깊은 트리 구조라면 해당 state를 넘겨주는데 여러 단계를 거쳐야하고, 이 state가 어디서부터 전달되었는지 추적하기 어려울 것이다.</p>\n<p>이러한 문제를 해결하기위해 전역 상태 관리 도구는 어떠한 컴포넌트에서도 전역으로 관리되는 state에 바로 접근할 수 있도록 해준다. state를 전달하기위해 여러 단계를 거칠 필요가 없는 것이다.</p>\n<p>해당 상태가 어플리케이션 전반에 이용되어 상태를 전달하기 위한 단계가 복잡할 경우, 혹은 전반에 이용되지 않더라도 상태를 전달하기 위한 단계가 복잡할 경우 사용된다.</p>\n<h1>전역 상태 관리를 위한 도구들</h1>\n<h2>Redux</h2>\n<p>리덕스는 리액트 이외에도 자바스크립트로 만들어진 어플리케이션이라면 사용할 수 있다.</p>\n<p>리덕스는 액션이라고 불리는 이벤트를 통해서만 state를 업데이트 시킬 수 있다. 이는 리액트가 사용하는 단방향 데이터 바인딩과 같은 원리로 상태 변경을 예측하기 쉽도록 한다. 언제, 어디서, 왜, 어떻게 state가 변경되었는지 파악할 수 있다.</p>\n<p>리덕스의 이러한 구조는 상태의 변경이 예측 가능하다는 장점도 있지만, 러닝 커브가 있고 구현하기위해 더 많은 코드를 작성해야한다.</p>\n<h3>언제 리덕스를 도입하면 좋을까</h3>\n<ul>\n<li>어플리케이션이 많은 상태를 보유하고, 어플리케이션의 여러 공간에서 사용될 때</li>\n<li>상태가 매우 자주 변경될 때</li>\n<li>상태 변경 로직이 복잡할 때</li>\n<li>어플리케이션의 규모가 클 때, 많은 사람들과 작업해야 할 때</li>\n</ul>\n<p>예측 가능하고, 테스트가 쉽다는 장점에 대규모 어플리케이션에 적합하다. 또한 상태 변경을 손쉽게 추적할 수 있기에 상태 변경 로직이 복잡할 때도 사용하면 좋다.</p>\n<h3>주요 개념</h3>\n<ul>\n<li>스토어는 전역 state를 저장하는 곳으로 자바스크립트 object인데 특별한 함수와 기능을 내장하고 있어 순수 전역 객체와 다르다.</li>\n<li>우리는 스토어 내부의 state를 직접적으로 수정하면 안된다. 이는 정해진 방식으로만 state를 조작하여 예측가능하다는 redux의 원칙을 위배한다.</li>\n<li>state를 변경하는 방법은 순수 액션 객체를 만들고 활용함으로써 가능하다. 액션 객체는 어플리케이션에 무슨 일이 발생할 것인지 알려준다. 그리고 dispatch를 사용해서, action을 전달한다.</li>\n<li>액션이 dispatch되면, reducer를 실행시키고 old state를 기반으로 new state를 계산하여 업데이트한다. old state에서 new state로 변경시킬 때 immutable을 유지해야한다. 만약 immutable하지 않다면 old state와 new state를 비교할 때 문제가 발생하고 리듀서가 올바르게 작동하지 않는다. (객체는 참조값이기 때문에.)</li>\n<li>마지막으로 스토어는 subscribers에게 구독중인 state가 변경되었다고 알려주고 UI가 변경되게 된다.</li>\n</ul>\n<h2>Recoil</h2>\n<p>Recoil은 facebook에서 출시한 상태관리 라이브러리이다.</p>\n<p>state는 공통된 상위 컴포넌트로 끌어올려야만 공유될 수 있으며 이 과정에서 거대한 트리가 다시 렌더링 되는 문제와 Context는 단일값만 저장할 수 있으며, 자체 소비자를 가지는 여러 값들의 집합을 담을 수 없다는 문제를 해결하기위해 탄생했다.</p>\n<h3>Recoil의 특징</h3>\n<p>boiler-plate free api로 redux는 간단한 상태 한개만 처리하려고 해도 수많은 보일러 플레이트 코드가 필요하였으나 recoil은 매우 간단하게 사용할 수 있다. 즉 러닝커브가 낮다고 할 수 있다.\n또한 비동기처리를 하기 위해서 redux의 경우는 redux-thunk와 같은 비동기 처리 라이브러리에 의존했지만 recoil에는 내장되어 있다.</p>\n<h3>주요 개념</h3>\n<ol>\n<li>atoms\n<ul>\n<li>atoms는 상태의 단위이며 업데이트와 구독이 가능하다. atom이 업데이트되면 각각의 구독된 컴포넌트는 새로운 값을 받아 리렌더링 된다. atoms는 런타임 중에서도 생성될 수 있다.</li>\n</ul>\n</li>\n<li>selectors\n<ul>\n<li>atoms나 다른 selectors를 입력으로 받아들이는 순수 함수다. 상위의 atoms 또는 selectors가 업데이트되면 하위의 selector 함수도 다시 실행된다. 컴포넌트들은 selectors를 atoms처럼 구독할 수 있으며 selectors가 변경되면 컴포넌트들도 다시 렌더링된다. selectors는 상태를 기반으로 파생된 데이터를 사용하는데 이용된다. <strong>최소한의 상태 집합만 atoms에 저장하고 파생된 데이터는 selectos를 통해서 처리함으로써 불필요한 상태의 보존을 방지할 수 있다.</strong></li>\n</ul>\n</li>\n</ol>\n<h2>Context api</h2>\n<p>Context api는 react에 자체적으로 내장된 전역 상태 관리 도구이다.</p>\n<h3>언제 Context api를 사용하면 좋을까?</h3>\n<p>상태 변경이 빈번하게 일어나지 않을 때, 간단한 데이터를 전역으로 공유하고 싶을 때 사용하면 좋다. Provider의 모든 하위 컴포넌트가 렌더링이 일어나기 때문이다. 예시로 언어 설정이나, 다크 모드 변경과 같은 스타일 설정을 저장해놓는데 적합하다.</p>\n<h1>API Response 캐싱을 위한 전역 상태 관리 이용</h1>\n<p>위투디 정식 서비스를 제작할 때, 나는 API Response를 캐싱하기로 했다. 기존에는 local state,useEffect로 구현되어 있어 컴포넌트가 렌더링 될 때마다 api를 요청했다. 유저 입장에서는 이미 한번 불러온 데이터를 다시 불러오는데 불필요한 로딩 시간이 생겼고, 성능적으로도 불필요한 네트워크 요청을 하기에 좋지 않았기 때문이다.</p>\n<p>초기에 Redux를 선택했다. 하지만 Redux는 비동기 처리가 불가능하기에 redux-thunk와 같은 비동기 미들웨어를 사용해야 하였고, 하나의 api 결과값을 캐싱하는데 매우 많은 코드가 필요하였다. 또한 redux를 활용하여 캐싱할 경우 결과값이 언제까지 유효할지에 대해서도 직접 설정을 해주어야했다.</p>\n<p>이후에는 react-query라는 라이브러리를 사용했다. redux와 같은 많은 보일러플레이트 코드들이 필요없었고, 유효 시간을 정해줄 수 있어 매우 유용했다. 또한 최근에는 Suspense와 연동이 되기에 데이터를 fetch 할 동안 fallback-ui를 보여줄 수 있다. 매번 컴포넌트마다 loading 관련 분기를 만들어 처리하지 않아도 된다. 마치 try-catch 구문처럼 관심사를 분리하여 더 효율적이고 가독성 높은 코드를 만들 수 있는 것이다.</p>\n<p>recoil의 경우, 비동기 처리를 별도의 라이브러리 없이 할 수 있고 fetch 중에는 Promise를 리턴하기에 Suspense 기능도 react-query와 마찬가지로 적용할 수 있다.</p>\n<p>만일 API Response를 캐싱하기 위해서 Redux를 선택한다면, 나는 기술에 대한 올바른 선택이 아니라고 말하고 싶다. Redux는 위에서 작성했듯 상태 변경이 빈번하게 일어나고, 상태 변경이 매우 복잡할 때 사용하면 좋다. 나의 경우 웹기반 디자인 에디터를 만들 때 리덕스를 활용했는데 리덕스의 특징에 따라 상태 변경이 매우 예측가능 하였고, 상태 변경을 쉽게 추적할 수 있다는 장점이 있었다.</p>\n<p>기술의 특징과 컨셉을 파악하고, 상황에 맞게 올바른 기술을 선택한다면 개발 생산성 향상을 통해 많은 시간을 세이브 할 수 있을 것이다!</p>","id":"d1ab9ee2-c0be-5477-b15c-54461acf94e5"}}},"staticQueryHashes":["1749904500","4031756233"],"slicesMap":{}}