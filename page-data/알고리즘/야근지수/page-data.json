{"componentChunkName":"component---src-templates-blog-post-js","path":"/알고리즘/야근지수/","result":{"data":{"site":{"siteMetadata":{"title":"jinwook567"}},"markdownRemark":{"id":"e9ac13ba-e8ff-5c5d-ba3e-157a2da38f9a","excerpt":"문제 링크 해결 전략 초기에는 완전 탐색으로 접근해보았다. 하지만 n을 works…","html":"<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/12927\">문제 링크</a></p>\n<h1>해결 전략</h1>\n<p>초기에는 완전 탐색으로 접근해보았다. 하지만 n을 works에 분배하는 과정에서 무조건 시간 초과가 발생할 수 밖에 없다.</p>\n<p>따라서 문제의 특성을 이용한 다른 접근 방법이 필요하다.\n우리는 배열 내 요소의 제곱의 합의 최솟값을 구해야한다. 제곱의 그래프는 우측으로 이동할수록 급격히 증가하는 그래프 형태를 띄게 된다.</p>\n<p>반대로 말하자면 좌측으로 이동할수록 급격히 감소한다는 의미이다. 우리는 최솟값을 구해야 하므로 감소하는 폭을 최대한 크게 만들어야 한다. 감소하는 폭을 최대한 크게 만들기 위해서는 배열 내에서 가장 큰 요소를 뽑아서 줄여주는 전략을 택하면 된다. 가장 큰 요소를 얼마나 줄여주느냐가 시간 복잡도에 큰 영향을 미친다.</p>\n<p>내가 작성한 초기 알고리즘은 최댓값을 구하고, 최댓값보다 바로 작은 숫자만큼 빼주는 방식이였다. 하지만 이렇게 작성할 경우 배열 내 모든 원소가 최댓값과 같은 경우를 고려해줘야 하기 때문에 알고리즘이 복잡해진다.</p>\n<p>최댓값을 구하고 최댓값과 n을 1씩 빼는 알고리즘을 사용한다면 간결하게 정답을 구할 수 있다. 하지만 n이 1,000,000이고 works 배열의 길이는 20,000이기 때문에 배열을 순회하면서 최댓값을 찾는 방식을 사용한다면 1,000,000 * 20,000 으로 시간 복잡도를 초과하게 된다. 최댓값을 구할 때 우리는 최대힙을 사용한다면 log(20,000) 시간으로 최댓값을 구할 수 있고 시간 복잡도를 초과하지 않게 된다.</p>\n<h1>교훈</h1>\n<p>시간 복잡도를 기반으로 방법을 생각해내는 것도 좋지만, 문제의 특성에 따라 방법을 생각하고 시간 복잡도를 줄이는 방안도 생각해봐야 한다. (이진탐색, 우선순위 큐 등)</p>\n<h1>전체 코드</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class MaxHeap {\n  constructor() {\n    this.heap = [];\n  }\n\n  swap(aIndex, bIndex) {\n    [this.heap[aIndex], this.heap[bIndex]] = [this.heap[bIndex], this.heap[aIndex]];\n  }\n\n  push(value) {\n    this.heap.push(value);\n    let currentIndex = this.heap.length - 1;\n    let parentIndex = Math.floor((currentIndex - 1) / 2);\n\n    while (parentIndex >= 0 &amp;&amp; this.heap[parentIndex] &lt; value) {\n      this.swap(parentIndex, currentIndex);\n      currentIndex = parentIndex;\n      parentIndex = Math.floor((currentIndex - 1) / 2);\n    }\n  }\n\n  pop() {\n    if (this.heap.length === 0) return undefined;\n    if (this.heap.length === 1) return this.heap.pop();\n\n    const root = this.heap[0];\n    const end = this.heap.pop();\n    this.heap[0] = end;\n\n    let currentIndex = 0;\n    let leftIndex = 1;\n    let rightIndex = 2;\n\n    while (\n      this.heap[currentIndex] &lt; this.heap[leftIndex] ||\n      this.heap[currentIndex] &lt; this.heap[rightIndex]\n    ) {\n      if (this.heap[leftIndex] &lt; this.heap[rightIndex]) {\n        this.swap(currentIndex, rightIndex);\n        currentIndex = rightIndex;\n      } else {\n        this.swap(currentIndex, leftIndex);\n        currentIndex = leftIndex;\n      }\n      leftIndex = currentIndex * 2 + 1;\n      rightIndex = currentIndex * 2 + 2;\n    }\n    return root;\n  }\n}\n\nfunction solution(n, works) {\n  const heap = new MaxHeap();\n  works.forEach((v) => heap.push(v));\n\n  while (n > 0) {\n    const max = heap.pop();\n    n -= 1;\n    if (max === 0) return 0;\n    //만일 최댓값이 0이라면 해야할 일이 없다는 뜻으로 0을 리턴하고 함수를 종료한다.\n    heap.push(max - 1);\n  }\n  return heap.heap.reduce((acc, cur) => acc + cur * cur, 0);\n}</code></pre></div>\n<h1>추가</h1>\n<p>재귀와 sort 메소드를 사용하는 방법을 생각해보았는데, sort 메소드의 경우 시간 복잡도가 NlogN이라서 효율성 테스트를 통과할 수 없었다. 코드는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function solution(n, works) {\n  function recursive(n, works) {\n    if (n === 0) return works.reduce((acc, cur) => acc + cur * cur, 0);\n\n    works.sort((a, b) => b - a);\n    if (works[0] === 0) return 0;\n\n    works[0] -= 1;\n    return recursive(n - 1, works);\n  }\n  return recursive(n, works);\n}</code></pre></div>","frontmatter":{"title":"야근지수","date":"October 04, 2022","description":"최대힙"}},"previous":{"fields":{"slug":"/알고리즘/스티커모으기/"},"frontmatter":{"title":"스티커 모으기"}},"next":null},"pageContext":{"id":"e9ac13ba-e8ff-5c5d-ba3e-157a2da38f9a","previousPostId":"e6a14e25-d9b2-5d3b-92e2-9ffc459ac905","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}