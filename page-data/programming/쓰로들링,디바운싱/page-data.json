{"componentChunkName":"component---src-templates-blog-post-js","path":"/programming/쓰로들링,디바운싱/","result":{"data":{"site":{"siteMetadata":{"title":"jinwook567"}},"markdownRemark":{"id":"53860c9a-c00f-5ec9-8dd6-4d2099991fef","excerpt":"…","html":"<p>쓰로들링과 디바운싱 개념이 가끔 서로 헷갈릴 떄가 있어서 글을 통해서 정리하도록 한다.\n두 기법 모두 불필요한 함수 호출 횟수를 줄여주기 위해 고안되었다.</p>\n<h1>쓰로들링</h1>\n<p>함수가 호출된 후, 정해진 시간 내에 동일한 함수를 호출할 경우 실행하지 않도록 하는 것이다.</p>\n<p>위투디 프로젝트에 적용해본 부분은 디자인 에디터의 창 크기가 resize 될 때마다 동적으로 캔버스 크기와 이미지 크기들을 변경시키는데 사용이 되었다.</p>\n<p>디바운싱이 아닌 쓰로들링으로 적용한 이유는, 브라우저의 창 크기가 작아지면서 캔버스 크기도 작아지는 모습을 보여주어야 하기 때문이다. 만일 디바운싱을 적용했다면 창 크기가 작아짐에도 불구하고 캔버스 크기는 계속 동일하다가 마지막에야 사이즈가 맞춰졌을 것이다.</p>\n<p>정리하자면 연속적인 이벤트가 발생하는데 이벤트가 발생하는 모습을 드문드문 보여줘야 할 때 사용한다고 할 수 있다. 예를 들어 스크롤 이벤트가 있다.</p>\n<h3>자바스크립트 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token punctuation\">,</span> time <span class=\"token operator\">=</span> <span class=\"token number\">3000</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> timer\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>React 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>timer<span class=\"token punctuation\">,</span> setTimer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>NodeJS<span class=\"token punctuation\">.</span>Timeout<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSomethingUsingThrottling</span> <span class=\"token operator\">=</span> time <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newTimer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//doSomething</span>\n      <span class=\"token function\">setTimer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setTimer</span><span class=\"token punctuation\">(</span>newTimer<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>디바운싱</h1>\n<p>디바운싱의 경우 연속적인 함수 호출 중에서 가장 마지막 혹은 처음의 함수를 호출하는 것이다.</p>\n<p>디바운싱이 주로 적용되는 부분은 검색 부분이다. 타이핑을 하는 동안은 검색에 대한 결과를 굳이 보여줄 큰 필요는 없으며 검색의 통신 비용이 꽤 크다고 생각하기 때문이다. 물론 쓰로들링으로 적용해도 관계없다.</p>\n<h3>자바스크립트 에시</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token punctuation\">,</span> time <span class=\"token operator\">=</span> <span class=\"token number\">3000</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> timer\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>\n\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">cb</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//사용 에시</span>\n<span class=\"token keyword\">const</span> debounceFunc <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">debounceFunc</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//9가 출력된다.</span></code></pre></div>\n<h3>리액트 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>timer<span class=\"token punctuation\">,</span> setTimer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>NodeJS<span class=\"token punctuation\">.</span>Timeout<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSomethingUsingDebouncing</span> <span class=\"token operator\">=</span> time <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> newTimer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//doSomething...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setTimer</span><span class=\"token punctuation\">(</span>newTimer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"쓰로들링과 디바운싱","date":"December 05, 2022","description":"쓰로들링, 디바운싱 개념과 활용"}},"previous":{"fields":{"slug":"/programming/이펙티브타입스크립트/4장/"},"frontmatter":{"title":"이펙티브 타입스크립트 4장"}},"next":null},"pageContext":{"id":"53860c9a-c00f-5ec9-8dd6-4d2099991fef","previousPostId":"93f20b56-f5b3-56b5-baf6-201ed50da5de","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}