{"componentChunkName":"component---src-templates-post-template-tsx","path":"/algorithm/숫자게임/","result":{"pageContext":{"node":{"fields":{"slug":"/algorithm/숫자게임/"},"excerpt":"문제 링크 해결 전략 우리는 B의 순서를 조정할 수 있다. 따라서 A의 순서를 바꿔도 상관없다. 순서가 변경된 A에 맞춰서 B의 순서를 변경하면 되기 때문이다. 우리는 근소한 차이로 이길 때, 최대한 많이 이길 수 있다. 예시로 1을 이기는데 9를 낼 필요는 없다는 것이다. 내가 2를 보유하고 있다면 2를 내는 것이 이득이다. 나중에 7과 같은 큰 수를 만나면 그 때 9를 내야한다. 위의 두 생각을 바탕으로 나는 A와 B를 내림차순으로 정렬하…","frontmatter":{"date":"2022-10-05T00:00:00.000Z","description":"그리디","title":"숫자 게임"},"html":"<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/12987\">문제 링크</a></p>\n<h1>해결 전략</h1>\n<ol>\n<li>\n<p>우리는 B의 순서를 조정할 수 있다. 따라서 A의 순서를 바꿔도 상관없다. 순서가 변경된 A에 맞춰서 B의 순서를 변경하면 되기 때문이다.</p>\n</li>\n<li>\n<p>우리는 근소한 차이로 이길 때, 최대한 많이 이길 수 있다. 예시로 1을 이기는데 9를 낼 필요는 없다는 것이다. 내가 2를 보유하고 있다면 2를 내는 것이 이득이다. 나중에 7과 같은 큰 수를 만나면 그 때 9를 내야한다.</p>\n</li>\n</ol>\n<p>위의 두 생각을 바탕으로 나는 A와 B를 내림차순으로 정렬하였다. 내림차순으로 정렬한 이유는 순서대로 비교해보았을 때, 어떤 순서에서 B 요소가 A 요소보다 크다면 해당 순서의 B 요소는 다음 순서로 등장하는 A의 요소들 전부를 이길 수 있기 때문이다. 즉 가장 근소한 차이로 이길 수 있는 순서를 알 수 있다는 말이다.</p>\n<p>나의 초기 알고리즘은 배열을 순회하면서 동일한 순서에 대해서 A 요소와 B 요소의 크기를 비교하는 것이였다. 하지만 이 알고리즘의 경우 이길 수 있는 개수를 누락시킨 다는 문제가 있었다. 예시는 아래와 같다.</p>\n<p><code>A: [5,3,1]</code>, <code>B:[4,2,0]</code>의 경우 내가 초기 작성한 알고리즘은 0이라는 정답을 도출한다. 하지만 실제 정답은 2이다. [A,B] 형태로 표현할 때, [3,4], [1,2] 2개의 케이스가 존재하기 때문이다.</p>\n<p>누락되는 문제를 해결하기 위해서는 비교하는 방식을 변경해주면 된다. 동일한 순서에 대해서만 비교해주는 것이 아니라, 만일 A가 B보다 클 경우 B의 순서는 고정시켜 놓고 A의 순서만 움직인다. 만일 B가 A보다 클 경우에는 A와 B 순서 둘다 움직여주면 된다.</p>\n<h1>전체 코드</h1>\n<pre><code class=\"language-javascript\">function solution(A, B) {\n  A.sort((a, b) => b - a)\n  B.sort((a, b) => b - a)\n\n  let answer = 0\n  const len = A.length\n\n  for (let i = 0, j = 0; i &#x3C; len; i++) {\n    if (A[i] &#x3C; B[j]) {\n      j++\n      answer++\n    }\n  }\n  return answer\n}\n</code></pre>\n<h1>추가</h1>\n<p>추가로 내림차순으로 정렬을 하지 않고, 최대힙을 이용하는 방법도 있다.</p>\n<pre><code class=\"language-javascript\">class MaxHeap {\n  constructor() {\n    this.heap = []\n  }\n\n  swap(aIndex, bIndex) {\n    ;[this.heap[aIndex], this.heap[bIndex]] = [\n      this.heap[bIndex],\n      this.heap[aIndex],\n    ]\n  }\n\n  push(value) {\n    this.heap.push(value)\n    let currentIndex = this.heap.length - 1\n    let parentIndex = Math.floor((currentIndex - 1) / 2)\n\n    while (parentIndex >= 0 &#x26;&#x26; this.heap[parentIndex] &#x3C; value) {\n      this.swap(parentIndex, currentIndex)\n      currentIndex = parentIndex\n      parentIndex = Math.floor((currentIndex - 1) / 2)\n    }\n  }\n\n  pop() {\n    if (this.heap.length === 0) return undefined\n    if (this.heap.length === 1) return this.heap.pop()\n\n    const root = this.heap[0]\n    const end = this.heap.pop()\n    this.heap[0] = end\n\n    let currentIndex = 0\n    let leftIndex = 1\n    let rightIndex = 2\n\n    while (\n      this.heap[currentIndex] &#x3C; this.heap[leftIndex] ||\n      this.heap[currentIndex] &#x3C; this.heap[rightIndex]\n    ) {\n      if (this.heap[leftIndex] &#x3C; this.heap[rightIndex]) {\n        this.swap(currentIndex, rightIndex)\n        currentIndex = rightIndex\n      } else {\n        this.swap(currentIndex, leftIndex)\n        currentIndex = leftIndex\n      }\n      leftIndex = currentIndex * 2 + 1\n      rightIndex = currentIndex * 2 + 2\n    }\n    return root\n  }\n}\n\nfunction solution(A, B) {\n  const heap_A = new MaxHeap()\n  const heap_B = new MaxHeap()\n  const len = A.length\n\n  for (let i = 0; i &#x3C; len; i++) {\n    heap_A.push(A[i])\n    heap_B.push(B[i])\n  }\n  let answer = 0\n\n  let maxA = heap_A.pop()\n  let maxB = heap_B.pop()\n\n  while (maxA) {\n    if (maxA &#x3C; maxB) {\n      answer++\n      maxA = heap_A.pop()\n      maxB = heap_B.pop()\n    } else {\n      maxA = heap_A.pop()\n    }\n  }\n  return answer\n}\n</code></pre>","id":"364fc3a7-2da8-57f3-85a9-943b2d1970a7"},"previous":{"fields":{"slug":"/algorithm/야근지수/"},"excerpt":"문제 링크 해결 전략 초기에는 완전 탐색으로 접근해보았다. 하지만 n을 works에 분배하는 과정에서 무조건 시간 초과가 발생할 수 밖에 없다. 따라서 문제의 특성을 이용한 다른 접근 방법이 필요하다.\n우리는 배열 내 요소의 제곱의 합의 최솟값을 구해야한다. 제곱의 그래프는 우측으로 이동할수록 급격히 증가하는 그래프 형태를 띄게 된다. 반대로 말하자면 좌측으로 이동할수록 급격히 감소한다는 의미이다. 우리는 최솟값을 구해야 하므로 감소하는 폭을…","frontmatter":{"date":"2022-10-04T00:00:00.000Z","description":"최대힙","title":"야근지수"},"html":"<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/12927\">문제 링크</a></p>\n<h1>해결 전략</h1>\n<p>초기에는 완전 탐색으로 접근해보았다. 하지만 n을 works에 분배하는 과정에서 무조건 시간 초과가 발생할 수 밖에 없다.</p>\n<p>따라서 문제의 특성을 이용한 다른 접근 방법이 필요하다.\n우리는 배열 내 요소의 제곱의 합의 최솟값을 구해야한다. 제곱의 그래프는 우측으로 이동할수록 급격히 증가하는 그래프 형태를 띄게 된다.</p>\n<p>반대로 말하자면 좌측으로 이동할수록 급격히 감소한다는 의미이다. 우리는 최솟값을 구해야 하므로 감소하는 폭을 최대한 크게 만들어야 한다. 감소하는 폭을 최대한 크게 만들기 위해서는 배열 내에서 가장 큰 요소를 뽑아서 줄여주는 전략을 택하면 된다. 가장 큰 요소를 어떻게 줄여주느냐가 시간 복잡도에 큰 영향을 미친다.</p>\n<p>내가 작성한 초기 알고리즘은 최댓값을 구하고, 최댓값보다 바로 작은 숫자만큼 빼주는 방식이였다. 하지만 이렇게 작성할 경우 배열 내 모든 원소가 최댓값과 같은 경우를 고려해줘야 하기 때문에 알고리즘이 복잡해진다.</p>\n<p>최댓값을 구하고 최댓값과 n을 1씩 빼는 알고리즘을 사용한다면 간결하게 정답을 구할 수 있다. 하지만 n이 1,000,000이고 works 배열의 길이는 20,000이기 때문에 배열을 순회하면서 최댓값을 찾는 방식을 사용한다면 1,000,000 * 20,000 으로 시간 복잡도를 초과하게 된다. 최댓값을 구할 때 우리는 최대힙을 사용한다면 log(20,000) 시간으로 최댓값을 구할 수 있고 시간 복잡도를 초과하지 않게 된다.</p>\n<h1>교훈</h1>\n<p>시간 복잡도를 기반으로 방법을 생각해내는 것도 좋지만, 문제의 특성에 따라 방법을 생각하고 시간 복잡도를 줄이는 방안도 생각해봐야 한다. (이진탐색, 우선순위 큐 등)</p>\n<h1>전체 코드</h1>\n<pre><code class=\"language-javascript\">class MaxHeap {\n  constructor() {\n    this.heap = []\n  }\n\n  swap(aIndex, bIndex) {\n    ;[this.heap[aIndex], this.heap[bIndex]] = [\n      this.heap[bIndex],\n      this.heap[aIndex],\n    ]\n  }\n\n  push(value) {\n    this.heap.push(value)\n    let currentIndex = this.heap.length - 1\n    let parentIndex = Math.floor((currentIndex - 1) / 2)\n\n    while (parentIndex >= 0 &#x26;&#x26; this.heap[parentIndex] &#x3C; value) {\n      this.swap(parentIndex, currentIndex)\n      currentIndex = parentIndex\n      parentIndex = Math.floor((currentIndex - 1) / 2)\n    }\n  }\n\n  pop() {\n    if (this.heap.length === 0) return undefined\n    if (this.heap.length === 1) return this.heap.pop()\n\n    const root = this.heap[0]\n    const end = this.heap.pop()\n    this.heap[0] = end\n\n    let currentIndex = 0\n    let leftIndex = 1\n    let rightIndex = 2\n\n    while (\n      this.heap[currentIndex] &#x3C; this.heap[leftIndex] ||\n      this.heap[currentIndex] &#x3C; this.heap[rightIndex]\n    ) {\n      if (this.heap[leftIndex] &#x3C; this.heap[rightIndex]) {\n        this.swap(currentIndex, rightIndex)\n        currentIndex = rightIndex\n      } else {\n        this.swap(currentIndex, leftIndex)\n        currentIndex = leftIndex\n      }\n      leftIndex = currentIndex * 2 + 1\n      rightIndex = currentIndex * 2 + 2\n    }\n    return root\n  }\n}\n\nfunction solution(n, works) {\n  const heap = new MaxHeap()\n  works.forEach(v => heap.push(v))\n\n  while (n > 0) {\n    const max = heap.pop()\n    n -= 1\n    if (max === 0) return 0\n    //만일 최댓값이 0이라면 해야할 일이 없다는 뜻으로 0을 리턴하고 함수를 종료한다.\n    heap.push(max - 1)\n  }\n  return heap.heap.reduce((acc, cur) => acc + cur * cur, 0)\n}\n</code></pre>\n<h1>추가</h1>\n<p>재귀와 sort 메소드를 사용하는 방법을 생각해보았는데, sort 메소드의 경우 시간 복잡도가 NlogN이라서 효율성 테스트를 통과할 수 없었다. 코드는 아래와 같다.</p>\n<pre><code class=\"language-javascript\">function solution(n, works) {\n  function recursive(n, works) {\n    if (n === 0) return works.reduce((acc, cur) => acc + cur * cur, 0)\n\n    works.sort((a, b) => b - a)\n    if (works[0] === 0) return 0\n\n    works[0] -= 1\n    return recursive(n - 1, works)\n  }\n  return recursive(n, works)\n}\n</code></pre>","id":"709f0900-a461-544b-9ac2-f9e722f4b122"},"next":{"fields":{"slug":"/programming/git/"},"excerpt":"merge 병합은 두 브랜치의 합집합을 구하는 것이다. 병합에는 3가지 종류가 있다. merge commit 서로 다른 변경된 부분이 있을 경우, 새롭게 저장한다. fast-forward 합친 결과물이 한 커밋의 결과물과 동일할 때 새로운 상태를 만들어 줄 필요없이 상태를 바꿔주면 된다. conflict 동일한 부분이 다를 경우 충돌이 일어나게 된다. pull request 정중하게 브랜치 병합을 요청하는 것이다. 풀 리퀘 제목: 동료 개발자…","frontmatter":{"date":"2022-10-06T00:00:00.000Z","description":"merge, pull request, fork, rebase..","title":"git 사용법"},"html":"<h1>merge</h1>\n<p>병합은 두 브랜치의 합집합을 구하는 것이다. 병합에는 3가지 종류가 있다.</p>\n<ol>\n<li>merge commit\n<ul>\n<li>서로 다른 변경된 부분이 있을 경우, 새롭게 저장한다.</li>\n</ul>\n</li>\n<li>fast-forward\n<ul>\n<li>합친 결과물이 한 커밋의 결과물과 동일할 때 새로운 상태를 만들어 줄 필요없이 상태를 바꿔주면 된다.</li>\n</ul>\n</li>\n<li>conflict\n<ul>\n<li>동일한 부분이 다를 경우 충돌이 일어나게 된다.</li>\n</ul>\n</li>\n</ol>\n<h1>pull request</h1>\n<p>정중하게 브랜치 병합을 요청하는 것이다.</p>\n<ul>\n<li>풀 리퀘 제목: 동료 개발자가 한 눈에 이해하기 쉬운 제목을 적어둔다.</li>\n<li>풀 리퀘 내용: 코드를 이해하는데 도움이 되는 설명을 적어준다. 스크린샷 혹은 테스트 방법</li>\n<li>reviewers: 콕 찝어서 풀 리퀘 검토 요청, 같은 팀원 혹은 해당 기능과 연관된 동료 선택</li>\n</ul>\n<h1>fork</h1>\n<p>타인의 원본저장소를 내 계정의 원격저장소로 복사해오는 명령어이다.\n브랜치를 포함한 원본저장소의 모든 커밋 이력을 통째로 복사한다.</p>\n<h3>오픈 소스 기여 방식</h3>\n<p>원본 저장소에는 지정된 collaborators만 코드를 푸쉬할 수 있다. 오픈소스 프로젝트에서 만일 collaborators가 너무 많아진다면 저장소를 관리하는데 어려워질 것이다. 하지만 동시에 많은 개발자들에게 의견을 받고 오픈소스를 개선하고 싶은 니즈가 있다. 이럴 때 개발자는 fork를 해서 원본 저장소를 복사하고, 이곳에 커밋을 올린 다음에 원본 저장소의 소유자에게 풀 리퀘를 요청하면 원본 저장소의 소유자는 개발자의 병합 요청을 검토해서 원본 저장소에 반영한다.</p>\n<h3>원본 저장소에 풀 리퀘 보내기</h3>\n<p>new pull request 버튼을 누르고 head repository, base repository가 뜬다면 성공이다.\n풀 리퀘에 대한 설명을 적고 요청을 보낸다. 만일 원본저장소에 컨트리뷰션 가이드가 있다면 읽고 준수하도록 한다. 보통 README.md에 존재한다.</p>\n<p>풀 리퀘를 승인하는 방법은, 좌측 카테고리에 fork 탭을 클릭하고 pull requests 탭을 클릭하면 요청된 풀 리퀘들을 확인할 수 있다. 댓글만 달고 싶다면 comment를, 댓글을 달고 코드가 좋아보여 바로 병합해도 되면 approve를, 수정을 요청하고 싶으면 request changes를 선택한다.</p>\n<h1>add remote</h1>\n<p>내 원격 저장소에서 원본 저장소의 히스토리도 같이 보고싶다면, add remote를 해주면 된다. 원격 이름에는 upstream을 넣어주고 원본 저장소 주소를 복사해서 넣어주면 된다. upstream은 원본 저장소를 지칭하는 관용적 닉네임이다.</p>\n<p><code>fetch</code>를 하게 되면 원본 저장소에 있는 커밋 히스토리를 받아올 수 있다. pull과는 다른 점은 커밋 이력만 받아오기 때문에 내 코드에는 아무 영향이 없다.</p>\n<h1>rebase</h1>","id":"6a5ee1a7-b8a6-5d22-8968-6a91a6171688"}}},"staticQueryHashes":["1749904500","4031756233"],"slicesMap":{}}