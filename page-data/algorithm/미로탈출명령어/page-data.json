{"componentChunkName":"component---src-templates-post-template-tsx","path":"/algorithm/미로탈출명령어/","result":{"pageContext":{"node":{"fields":{"slug":"/algorithm/미로탈출명령어/"},"excerpt":"문제 링크 해결 전략 격자 미로에서 출발지와 도착지를 가는 길 중 문자열이 사전 순서에서 가장 작은 길을 구해야한다. 격자 미로: 격자 미로일 경우 우리는 어느 한 지점에서, 다른 지점까지의 최단 거리를 매우 쉽게 알 수 있다. 예시로 (a1,b1), (a2,b2) 두 좌표일 때 최단 거리는 |a1-a2|+|b1-b2| 이다. 사전 순서에서 가장 작은 길: 방향을 문자열로 치환하였을 때, 사전 순으로 나열하면 d, l, r, u이다. 단어를 …","frontmatter":{"date":"2023-03-10T00:00:00.000Z","description":"그리디","title":"미로탈출명령어"},"html":"<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/150365\">문제 링크</a></p>\n<h1>해결 전략</h1>\n<p>격자 미로에서 출발지와 도착지를 가는 길 중 문자열이 사전 순서에서 가장 작은 길을 구해야한다.</p>\n<ol>\n<li>\n<p>격자 미로: 격자 미로일 경우 우리는 어느 한 지점에서, 다른 지점까지의 최단 거리를 매우 쉽게 알 수 있다. 예시로 (a1,b1), (a2,b2) 두 좌표일 때 최단 거리는 |a1-a2|+|b1-b2| 이다.</p>\n</li>\n<li>\n<p>사전 순서에서 가장 작은 길: 방향을 문자열로 치환하였을 때, 사전 순으로 나열하면 d, l, r, u이다. 단어를 사전 순으로 정렬했을 때 앞에 위치하려면, 단어 내 앞에 있는 문자가 최대한 사전순으로 정렬되어야 한다. 그 의미는 drrr이 rddd 보다 사전 앞에 위치한다. 단어 내 앞에 배치된 문자가 중요도가 훨씬 높다는 의미이다.</p>\n</li>\n<li>\n<p>k번: 우리는 k번 움직일 수 있다. 왔던 길을 다시 돌아갈 수도 있다. 다시 말하면 우리는 이동한 지점으로부터 도착지까지 남은 k번 내에 도달할 수 있다면 어디를 가던 상관이 없다.</p>\n</li>\n</ol>\n<p>2번 항목에서 그리디 알고리즘을 떠올리게 되었고,\n내가 고안한 알고리즘은 다음과 같다.</p>\n<ol>\n<li>우리는 k번 만큼 움직인다. 방향의 우선 순위는 방향을 문자열로 치환했을 때의 사전 순서이다. (d,l,r,u)</li>\n<li>d,l,r,u 순서대로 순회하며 다음의 이동 지점을 구해본다.</li>\n<li>만일 다음의 이동 지점에서 도착지까지 도달할 수 없다면, 다음 순회로 넘어간다. (남은 k가 모자라는 경우)</li>\n<li>만일 다음의 이동 지점에서 도착지까지 도달할 수 있다면 k를 1개 줄여주고, 해당 방향을 기록해준다. 2번의 순회를 멈춘다.</li>\n<li>이 과정을 k가 0이 될 때 까지 반복한다.</li>\n<li>k가 0이 되었을 때 도착한 지점이 목적지와 다르다면 'impossible'을 출력한다. 그게 아니라면 기록한 방향을 출력해준다.</li>\n</ol>\n<h1>정답 코드</h1>\n<pre><code class=\"language-js\">function solution(n, m, x, y, r, c, k) {\n  const direction = ['d', 'l', 'r', 'u'];\n  const dx = [0, -1, 1, 0];\n  const dy = [1, 0, 0, -1];\n\n  let answer = '';\n\n  const start = [x - 1, y - 1];\n  const end = [r - 1, c - 1];\n\n  while (k > 0) {\n    for (let i = 0; i &#x3C; 4; i++) {\n      const next = [start[0] + dy[i], start[1] + dx[i]];\n      if (check(next, n, m)) {\n        if (getDistance(next, end) &#x3C;= k) {\n          k -= 1;\n          start[0] = next[0];\n          start[1] = next[1];\n          answer += direction[i];\n          break;\n        }\n      }\n      if (i === 3) return 'impossible'; // 아래 설명 참조\n    }\n  }\n  if (start[0] !== end[0] || start[1] !== end[1]) return 'impossible';\n  return answer;\n}\n\nfunction getDistance(pos1, pos2) {\n  const [y1, x1] = pos1;\n  const [y2, x2] = pos2;\n  return Math.abs(x2 - x1) + Math.abs(y2 - y1);\n}\n\nfunction check(pos, n, m) {\n  const [pos_y, pos_x] = pos;\n  return pos_y >= 0 &#x26;&#x26; pos_y &#x3C;= n - 1 &#x26;&#x26; pos_x >= 0 &#x26;&#x26; pos_x &#x3C;= m - 1;\n}\n</code></pre>\n<p>for 문내에 <code>if (i === 3) return 'impossible'</code> 이라는 코드를 삽입한 이유는 모든 방향으로 가봤을 때 도달할 수 있는 경우가 없다면 불가능한 경우이기 때문에 루프를 종료시킨다. 루프를 종료시키지 않으면 k가 줄지 않기 때문에 while문을 벗어날 수 없다.</p>","id":"c95bf2f7-a8b0-51a8-8b8e-c9fb5cf894c7"},"previous":{"fields":{"slug":"/algorithm/이모티콘할인행사/"},"excerpt":"문제 링크 해결 전략 우리는 문제에 주어진 우선순위에 맞게 최대 이모티콘 서비스 가입자수와 판매액을 구해야한다. 이 문제는 완전 탐색으로 해결할 수 있는 문제이다. 우리는 이모티콘별 적정 할인률을 구해야하는데, 이모티콘의 할인률은 10%,20%,30%,40% 중 하나이다.\nemoticons의 최대 길이는 7로 최대의 시간 복잡도를 계산해보면, 100 * (4 ** 7)로 충분하다. (n=100, emoticons의 길이 7) 완전 탐색 알고리…","frontmatter":{"date":"2023-02-09T00:00:00.000Z","description":"중복 순열, 완전 탐색","title":"이모티콘 할인행사"},"html":"<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/150368\">문제 링크</a></p>\n<h1>해결 전략</h1>\n<p>우리는 문제에 주어진 우선순위에 맞게 최대 이모티콘 서비스 가입자수와 판매액을 구해야한다.</p>\n<p>이 문제는 완전 탐색으로 해결할 수 있는 문제이다. 우리는 이모티콘별 적정 할인률을 구해야하는데, 이모티콘의 할인률은 10%,20%,30%,40% 중 하나이다.\nemoticons의 최대 길이는 7로 최대의 시간 복잡도를 계산해보면, <code>100 * (4 ** 7)</code>로 충분하다. (n=100, emoticons의 길이 7)</p>\n<p>완전 탐색 알고리즘을 설계하면 된다.</p>\n<ol>\n<li>가능한 할인율을 전부 생성한다. 중복 순열 알고리즘을 사용한다.</li>\n<li>순열 경우의 수를 순회하면서 이모티콘 서비스 가입자 수와 판매액을 구한다.</li>\n<li>우선순위에 따라서 최대 이모티콘 서비스 가입자수와 판매액을 갱신한다.</li>\n</ol>\n<h1>정답 코드</h1>\n<pre><code class=\"language-js\">const getSum = (user, emoticons, discountRates) => {\n  const [rate] = user;\n  let sum = 0;\n\n  const n = emoticons.length;\n  for (let i = 0; i &#x3C; n; i++) {\n    if (discountRates[i] >= rate) {\n      sum += emoticons[i] * (100 - discountRates[i]) * 0.01;\n    }\n  }\n  return sum;\n};\n\nfunction getPermutation(arr, n) {\n  const result = [];\n  if (n === 1) return arr.map(el => [el]);\n\n  arr.forEach((v, i) => {\n    const permutation = getPermutation(arr, n - 1);\n    const attached = permutation.map(el => [v, ...el]);\n    result.push(...attached);\n  });\n  return result;\n}\n\nfunction solution(users, emoticons) {\n  const discountRates = getPermutation([10, 20, 30, 40], emoticons.length);\n\n  let answer_plus = 0;\n  let answer_price = 0;\n\n  for (let discountRate of discountRates) {\n    let plus = 0;\n    let price = 0;\n    for (let user of users) {\n      const sum = getSum(user, emoticons, discountRate);\n      if (sum >= user[1]) plus++;\n      else price += sum;\n    }\n\n    if (plus > answer_plus) {\n      answer_plus = Math.max(answer_plus, plus);\n      answer_price = price;\n    }\n\n    if (plus === answer_plus) {\n      answer_price = Math.max(answer_price, price);\n    }\n  }\n\n  return [answer_plus, answer_price];\n}\n</code></pre>","id":"1c6ad7e6-be48-5d9f-835b-9ddc01d12fb4"},"next":{"fields":{"slug":"/algorithm/표현가능한이진트리/"},"excerpt":"문제 링크 해결 전략 문제에 접근법은 처음에 구상한 게 맞았으나, 구현에서 조금 애를 먹었다. 알고리즘 풀 때는 타입스크립트가 아닌 자바스크립트를 사용해서 그런가 자잘한 타이핑 오류가 있었다. 우리에게는 십진수가 주어진다. 완전이진트리를 사용하여 이진법을 제작했을 때, 해당 십진수를 이진법으로 표현할 수 있는지 문제이다. 우리가 해결해야 할 문제는 이진법으로 표현할 수 있는지, 즉 완전이진트리모양을 만족시킬 수 있는지이다. 부모 노드 아래 더…","frontmatter":{"date":"2023-03-11T00:00:00.000Z","description":"재귀, 구현","title":"표현 가능한 이진트리"},"html":"<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/150367\">문제 링크</a></p>\n<h1>해결 전략</h1>\n<p>문제에 접근법은 처음에 구상한 게 맞았으나, 구현에서 조금 애를 먹었다. 알고리즘 풀 때는 타입스크립트가 아닌 자바스크립트를 사용해서 그런가 자잘한 타이핑 오류가 있었다.</p>\n<p>우리에게는 십진수가 주어진다. 완전이진트리를 사용하여 이진법을 제작했을 때, 해당 십진수를 이진법으로 표현할 수 있는지 문제이다.</p>\n<p>우리가 해결해야 할 문제는 이진법으로 표현할 수 있는지, 즉 완전이진트리모양을 만족시킬 수 있는지이다.<br>\n부모 노드 아래 더미 노드를 완전이진트리 모양을 만족시키면서 자유롭게 추가할 수 있지만, 부모 노드가 더미 노드라면 자식 노드로 더미 노드가 아닌 노드를 추가할 수 없다.</p>\n<ol>\n<li>\n<p>우선 십진수를 이진법으로 변환한다. 이진법은 뒤가 아닌 앞에 0을 추가하면 값은 그대로이므로, 만약 이진법이 완전이진트리의 모양을 충족시키지 않는다면 해당 모양을 충족시키도록 앞쪽에 0을 삽입해준다. 모양을 충족시킨 이후에 0을 더 삽입하여 완전이진트리 모양을 또 만들수는 있으나, 이 경우 루트 노드가 무조건 0이 되기 때문에 고려하지 않아도 된다.</p>\n</li>\n<li>\n<p>완전이진트리에서 루트 노드, 왼쪽 자식 노드, 오른쪽 자식 노드를 구하는 알고리즘을 작성한다. 루트 노드의 경우 배열의 중앙값이고, 왼쪽 자식 노드의 경우는 왼쪽 자식 노드 본인의 자식 노드의 개수만큼 빼주고 또 1을 빼준다. 위 방식이 가능한 이유는 다음과 같은 가정이 있어서이다.</p>\n<p><em>이진트리에서 리프 노드가 아닌 노드는 자신의 왼쪽 자식이 루트인 서브트리의 노드들보다 오른쪽에 있으며, 자신의 오른쪽 자식이 루트인 서브트리의 노드들보다 왼쪽에 있다고 가정합니다.</em></p>\n<p>오른쪽 자식 노드의 경우는 오른쪽 자식 노드 본인의 자식 노드의 개수만큼 더해주고 또 1을 더해준다.</p>\n<p>자식 노드를 구하는 다른 방식은, 루트 노드를 구하는 방식을 활용하는 것이다. 완전이진트리는 트리의 일부분을 떼어내도 완전이진트리 모양이다. 따라서 왼쪽 자식노드를 구한다고 가정하면 자신의 왼쪽 노드를 기준으로 트리를 뜯어내고, 해당 트리의 루트를 찾으면 왼쪽 노드를 구할 수 있다.</p>\n</li>\n<li>\n<p>재귀를 활용하여 루트를 기점으로 완전이진트리를 순회한다. 순회하면서 위에서 언급한 완전이진트리 모양을 만족시킬 수 있는 조건을 검사한다. 만일 만족시킬 수 없다면 재귀를 멈추고 0을 반환한다. 완전 이진트리를 만족시킨다면 1을 반환한다.</p>\n</li>\n</ol>\n<h1>정답 코드</h1>\n<pre><code class=\"language-js\">function solution(numbers) {\n  return numbers.map(number => {\n    const binary = number.toString(2);\n\n    const floor = getFloor(binary.length);\n    const treeBinary = makeTreeBinary(binary, getNodeCount(floor));\n\n    const rootIndex = getRootIndex(treeBinary);\n\n    let flag = true;\n    function validate(binary, floor, index) {\n      if (floor === 1) return; // 1층일 때 순회를 종료한다. 리프 노드를 검증할 필요가 없다.\n\n      const leftChildIndex = index - getNodeCount(floor - 2) - 1;\n      const rightChildIndex = index + getNodeCount(floor - 2) + 1;\n\n      if (\n        binary.charAt(index) === '0' &#x26;&#x26;\n        (binary.charAt(leftChildIndex) === '1' ||\n          binary.charAt(rightChildIndex) === '1')\n      ) {\n        flag = false;\n        return;\n      }\n\n      validate(binary, floor - 1, leftChildIndex);\n      validate(binary, floor - 1, rightChildIndex);\n    }\n\n    validate(treeBinary, floor, rootIndex);\n    return flag ? 1 : 0;\n  });\n}\n\nfunction makeTreeBinary(binary, count) {\n  let result = binary;\n  for (let i = 0; i &#x3C; count - binary.length; i++) {\n    result = '0' + result;\n  }\n  return result;\n}\n\nfunction getRootIndex(binary) {\n  return Math.floor(binary.length / 2);\n}\n\nfunction getFloor(nodeCount) {\n  return nodeCount.toString(2).length;\n}\n\nfunction getNodeCount(floor) {\n  if (floor === 0) return 0;\n  let byte = '';\n  for (let i = 0; i &#x3C; floor; i++) {\n    byte += '1';\n  }\n  return parseInt(byte, 2);\n}\n</code></pre>\n<p>코드가 조금 장황하다.</p>","id":"c9d97b10-330d-5938-99fe-95e0d763cc71"}}},"staticQueryHashes":["1749904500","4031756233"],"slicesMap":{}}