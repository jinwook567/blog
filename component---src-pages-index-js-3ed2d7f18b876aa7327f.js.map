{"version":3,"file":"component---src-pages-index-js-3ed2d7f18b876aa7327f.js","mappings":"uJAmCA,IAxBY,WAAO,IAAD,IACVA,GAAOC,EAAAA,EAAAA,gBAAe,cAiBS,QAAzB,EAAGD,EAAKE,KAAKC,oBAAY,OAAtB,EAAwBC,OACF,QAAzB,EAAGJ,EAAKE,KAAKC,oBAAY,OAAtB,EAAwBE,OAEvC,OAAO,uBAAKC,UAAU,OACxB,C,+CCEA,IAhCe,SAAH,GAAuC,IAG7CC,EAHYC,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAE3BC,EADcC,WACDJ,EAASK,SAiB5B,OAbEN,EADEI,EAEA,sBAAIL,UAAU,gBACZ,gBAAC,EAAAQ,KAAI,CAACC,GAAG,KAAKN,IAKhB,gBAAC,EAAAK,KAAI,CAACR,UAAU,mBAAmBS,GAAG,KACnCN,GAML,uBAAKH,UAAU,iBAAiB,oBAAmBK,GACjD,0BAAQL,UAAU,iBAAiBC,GACnC,4BAAOG,GACP,oCACK,IAAIM,MAAOC,cAAa,mBAE3B,qBAAGC,KAAK,4BAA0B,WAI1C,C,+CCtBMC,EAAM,SAAH,GAAgD,IAAD,MAAzCC,EAAW,EAAXA,YAAmBX,GAAF,EAAJY,KAAW,EAALZ,OAAOC,EAAQ,EAARA,SAC/BR,GAASD,EAAAA,EAAAA,gBAAe,cAAxBC,KAgBFoB,EAAkBF,GAAelB,EAAKC,aAAaiB,YACnDG,EAAgC,QAApB,EAAGrB,EAAKC,oBAAY,aAAjB,EAAmBM,MAExC,OACE,gCACE,6BAAQc,EAAkBd,EAAK,MAAMc,EAAiBd,GACtD,wBAAMe,KAAK,cAAcC,QAASH,IAClC,wBAAMI,SAAS,WAAWD,QAAShB,IACnC,wBAAMiB,SAAS,iBAAiBD,QAASH,IACzC,wBAAMI,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAAvB,EAAKC,oBAAY,OAAQ,QAAR,EAAjB,EAAmBE,cAAM,WAAR,EAAjB,EAA2BsB,UAAO,KAE7C,wBAAMH,KAAK,gBAAgBC,QAAShB,IACpC,wBAAMe,KAAK,sBAAsBC,QAASH,IACzCZ,EAGP,EAEAS,EAAIS,aAAe,CACjBR,YAAY,IAQd,K,uHCOA,UA3DkB,SAAH,GAA4B,IAAD,EAArBpB,EAAI,EAAJA,KAAMQ,EAAQ,EAARA,SACnBqB,GAAkC,QAAtB,EAAA7B,EAAKE,KAAKC,oBAAY,aAAtB,EAAwBM,QAAK,QACzCqB,EAAQ9B,EAAK+B,kBAAkBC,MAQrC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAM,CAACzB,SAAUA,EAAUC,MAAOoB,GACjC,gBAAC,IAAG,MACJ,uLAUJ,gBAAC,IAAM,CAACrB,SAAUA,EAAUC,MAAOoB,GACjC,gBAAC,IAAG,MACJ,sBAAIK,MAAO,CAAEC,UAAU,SACpBL,EAAMM,KAAI,SAAAC,GACT,IAAM5B,EAAQ4B,EAAKC,YAAY7B,OAAS4B,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACElC,UAAU,iBACVoC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAA7B,KAAI,CAACC,GAAIsB,EAAKE,OAAOC,KAAMI,SAAS,OACnC,wBAAMA,SAAS,YAAYnC,KAG/B,6BAAQ4B,EAAKC,YAAYO,OAE3B,+BACGR,EAAKC,YAAYlB,aAChB,qBAAGwB,SAAS,eAAeP,EAAKC,YAAYlB,eAMxD,KAIR,EASO,IAAM0B,EAAO,WAAH,OAAS,gBAAC,IAAG,CAACrC,MAAM,aAAc,C","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return <div className=\"bio\"></div>\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nSeo.defaultProps = {\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  // 포스팅이 많아지면 카테고리로 나누기.\n  // const set = new Set()\n  // posts.forEach(post => {\n  //   set.add(post.fields.slug.split(\"/\")[1])\n  // })\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  {post.frontmatter.description && (\n                    <p itemProp=\"description\">{post.frontmatter.description}</p>\n                  )}\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","site","siteMetadata","author","social","className","header","location","title","children","isRootPath","__PATH_PREFIX__","pathname","Link","to","Date","getFullYear","href","Seo","description","lang","metaDescription","defaultTitle","name","content","property","twitter","defaultProps","siteTitle","posts","allMarkdownRemark","nodes","length","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","itemProp","date","Head"],"sourceRoot":""}